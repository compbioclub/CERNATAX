{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ceRNAxis","text":"<p>Welcome to the official documentation of ceRNAxis!</p>"},{"location":"#overview","title":"Overview","text":"<p>ceRNAxis detects ceRNA network <code>mRNA-miRNA-lncRNA triplet axis</code> from RNA expression profiles.</p> <p>We have manually curated a reference ceRNA network by integrating <code>TargetSCAN 8.0</code>, <code>miRTarBase 9.0</code>, <code>miRDB 6.0</code>, <code>NPInter 4.0</code>, <code>ENCORI/starBase 2.0</code>, <code>miRWalk V3</code>, and <code>RNAInter in 2020</code>. </p> <p>To run ceRNAxis with full reference ceRNA network, please download the full file <code>ceRNA_ref.csv</code>, and place it into <code>cernatax/data</code>.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Want to start using it immediately? Check out the Installation Guide.</p>"},{"location":"#tutorial-guide","title":"Tutorial Guide","text":"<p>The followings are AS Paper scripts on how to use ceRNAxis on the SCZ and GDM cohort:</p> <ul> <li>Basic operations and stats for the reference ceRNA network</li> <li>SCZ - Use DEG to get cohort-specific and disease relatated ceRNA axis from SCZ data</li> <li>GDM - Use DEG to get cohort-specific and disease relatated ceRNA axis from GDM data</li> <li>SCZ - ceRNA expression visualization for a cohort</li> <li>SCZ - ceRNA-axis correlation analysis for a cohort</li> <li>SCZ - GWAS analysis for ceRNA-axis</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>If you use ceRNAxis in your research, please cite the following paper:</p> <p>APA format:</p> <pre><code>To be continued.\n</code></pre> <p>BibTeX format:</p> <pre><code>To be continued.\n</code></pre>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide explains how to install and configure ceRNAxis.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installation, please ensure you have the following dependencies:</p> <ul> <li>Python &gt;= 3.12</li> <li>Other dependencies (if applicable)</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":"<p>You can install ceRNAxis from GitHub as follows:</p> <pre><code>pip install git+https://github.com/compbioclub/cernaxis.git@v1_as\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>To be continued.</p>"},{"location":"tutorial/GDM_ceRNA_axis_from_DEG/","title":"GDM - Use DEG to get cohort-specific and disease relatated ceRNA axis from GDM data","text":"<pre><code>%load_ext autoreload\n\n# Just download the github, and load the cernaxis into python path\n# do\nimport sys\nsys.path.append('../../')\n\n# or install cernaxis by pip\n#!pip install git+https://github.com/compbioclub/cernaxis.git@v1_as\n\n\nfrom cernaxis.cernaxis import ceRNAxis\n\n# initialize cernaxis object\ncernaxis = ceRNAxis()\n</code></pre> <pre>\n<code>The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n</code>\n</pre> <pre><code>%autoreload\n\n# Use DE miRNA/mRNA to get the ceRNA_axis\n\nimport pandas as pd\n\n# use DE miRNA list as the strict criteria\nmiRNA_list = pd.read_csv('../../demo/GDM_DEG_miRNA_GSE112168.txt')['symbol'].to_list()\nprint(miRNA_list[:5])\nmRNA_list = pd.read_csv('../../demo/GDM_DEG_mRNA_GSE154377.txt')['symbol'].to_list()\nprint(mRNA_list[:5])\n</code></pre> <pre>\n<code>['hsa-miR-125a-3p', 'hsa-miR-619-5p', 'hsa-miR-224-5p', 'hsa-miR-3180-1-3p', 'hsa-miR-3180-2-3p']\n['PSAP', 'SNORD17', 'SNORD15B', 'RAB13', 'FLNA']\n</code>\n</pre> <pre><code>%autoreload\n# Use strict DE miRNA to get the ceRNA_axis\nceRNA_df, axis_df = cernaxis.find_ceRNA_axis_by_DEG_list(miRNA_list, mRNA_list)\n# store the filtered ceRNA network and ceRNA axis\nceRNA_df.to_csv('../../demo_out/GDM_ceRNA_network.csv')\naxis_df.to_csv('../../demo_out/GDM_ceRNA_axis.csv')\naxis_df\n</code></pre> <pre>\n<code>/Users/chenlingxi/Library/CloudStorage/Dropbox/workspace/SCZ/ceRNAxis/docs/tutorial/../../cernaxis/cernaxis.py:32: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n</code>\n</pre> miRNA ceRNA species database type inference 220575 hsa-miR-106b-5p ABCD1 Homo sapiens miRWalk miRNA-mRNA strict 220710 hsa-miR-106b-5p ACKR2 Homo sapiens miRWalk miRNA-mRNA strict 220727 hsa-miR-106b-5p ACVR2B Homo sapiens RNAInter miRNA-mRNA strict 220732 hsa-miR-106b-5p ADAM22 Homo sapiens miRWalk miRNA-mRNA strict 220735 hsa-miR-106b-5p ADAMTS1 Homo sapiens RNAInter miRNA-mRNA strict ... ... ... ... ... ... ... 2489318 hsa-miR-363-3p ZC3HAV1L Homo sapiens RNAInter;miRTarBase_9.0 miRNA-mRNA strict 2489351 hsa-miR-363-3p ZNF142 Homo sapiens RNAInter miRNA-mRNA strict 2489387 hsa-miR-363-3p ZNF470 Homo sapiens miRWalk miRNA-mRNA strict 2489393 hsa-miR-363-3p ZNF521 Homo sapiens miRDB_6.0;RNAInter miRNA-mRNA strict 2489434 hsa-miR-363-3p ZSCAN12 Homo sapiens RNAInter;miRTarBase_9.0 miRNA-mRNA strict <p>730 rows \u00d7 6 columns</p> <pre><code>\n</code></pre> <p>Compared with DLRAPom detected ceRNA axes</p> <pre><code>import pandas as pd\nfrom plotnine import *\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('../../demo_out/GDM_DLRAPom_ceRNA_axis.csv')\ndf['Tool'] = 'DLRAPom'\ndf3 = axis_df[['miRNA', 'ceRNA', 'type']].drop_duplicates()\ndf3['Tool'] = 'ceRNAxis'\ndf = pd.concat([df, df3])\ndf\n\nsummary = (\n    df\n    .drop_duplicates(['miRNA','ceRNA','type','Tool'])\n    .groupby('Tool')\n    .size()\n    .reset_index(name='# of interactions')\n)\n\ntools = summary['Tool'].tolist()\nsets = {\n    tool: set(df[df.Tool==tool].apply(lambda r: f\"{r.miRNA}|{r.ceRNA}\", axis=1))\n    for tool in tools\n}\n\nprint('Interactions detected by both tools:', sets['DLRAPom'] &amp;amp; sets['ceRNAxis'])\n\nfrom matplotlib_venn import venn2\nA, B = tools\nfig = plt.figure(figsize=(5,5))\nvenn2([sets[A], sets[B]], set_labels=[A, B])\n\n\nplt.title('Detected ceRNA interactions in GDM data')\nplt.show()\nfig.savefig('../../demo_out/GDM_venn.pdf', format='pdf')\n</code></pre> <pre>\n<code>Interactions detected by both tools: {'hsa-miR-144-3p|MALAT1', 'hsa-miR-224-5p|ATP11A', 'hsa-miR-363-3p|MALAT1', 'hsa-miR-106b-5p|XIST', 'hsa-miR-224-5p|MALAT1', 'hsa-miR-144-3p|IRS1', 'hsa-miR-363-3p|XIST', 'hsa-miR-106b-5p|ATP11A', 'hsa-miR-106b-5p|MALAT1'}\n</code>\n</pre>"},{"location":"tutorial/GDM_ceRNA_axis_from_DEG/#use-differential-expressed-de-mirnamrna-to-get-cohort-specific-and-disease-relatated-cerna-axis-from-gdm-data","title":"Use differential expressed (DE) miRNA/mRNA to get cohort-specific and disease relatated ceRNA axis from GDM data","text":"<p>Background of GDM data:</p> <pre><code>With applications to gestational diabetes mellitus (GDM), we predicted nine risk protein-coding biomarkers and some potential lncRNA\u2013miRNA\u2013mRNA regulatory axes, which all correlated with GDM. In those regulatory axes, the MALAT1/hsa-miR-144-3p/IRS1 axis was predicted to be the key axis and was identified as being associated with GDM for the first time.\n</code></pre>"},{"location":"tutorial/SCZ_ceRNA_axis_from_DEG/","title":"SCZ - Use DEG to get cohort-specific and disease relatated ceRNA axis from SCZ data","text":"<pre><code>%load_ext autoreload\n\n# Just download the github, and load the cernaxis into python path\n# do\nimport sys\nsys.path.append('../../')\n\n# or install cernaxis by pip\n#!pip install git+https://github.com/compbioclub/cernaxis.git@v1_as\n\n\nfrom cernaxis.cernaxis import ceRNAxis\n\n# initialize cernaxis object\ncernaxis = ceRNAxis()\n</code></pre> <pre><code>%autoreload\n\n# Use DE miRNA/mRNA to get the ceRNA_axis\n\nimport pandas as pd\n\n# use DE miRNA list as the strict criteria\ndeg_strict_df = pd.read_csv('../../demo/SCZ_DEG_RNA.csv', index_col=0)\nprint('deg_strict_df\\n', deg_strict_df.head())\n# use DE mRNA list as the loose criteria\ndeg_loose_df = pd.read_csv('../../demo/SCZ_DEG_mRNA.csv', index_col=0)\nprint('deg_loose_df\\n', deg_loose_df.head())\n</code></pre> <pre>\n<code>deg_strict_df\n                   type             gene    log2FC        pvalue          padj\nhsa-miR-16-2-3p  miRNA  hsa-miR-16-2-3p -5.139793  2.640000e-13  4.020000e-10\nhsa-miR-1306-3p  miRNA  hsa-miR-1306-3p -2.209798  3.320000e-11  1.690000e-08\nhsa-miR-1307-3p  miRNA  hsa-miR-1307-3p -2.093602  2.960000e-11  1.690000e-08\nhsa-miR-132-5p   miRNA   hsa-miR-132-5p -2.121375  5.510000e-09  1.680000e-06\nhsa-miR-624-5p   miRNA   hsa-miR-624-5p  3.021188  3.580000e-08  9.100000e-06\ndeg_loose_df\n            baseMean  log2FoldChange     lfcSE      stat    pvalue      padj  \\\nMPO      306.948587        2.216337  0.564877  3.923577  0.000087  0.002920   \nDEPDC1    13.781165        2.521829  0.955832  2.638359  0.008331  0.072875   \nDEPDC1B   35.058035        1.846581  0.528130  3.496453  0.000471  0.010010   \nUTS2     166.152947        2.148164  0.747088  2.875383  0.004035  0.044262   \nCOL17A1   17.798800        2.779151  1.039143  2.674463  0.007485  0.067760   \n\n            gene  type    log2FC  \nMPO          MPO  mRNA  2.216337  \nDEPDC1    DEPDC1  mRNA  2.521829  \nDEPDC1B  DEPDC1B  mRNA  1.846581  \nUTS2        UTS2  mRNA  2.148164  \nCOL17A1  COL17A1  mRNA  2.779151  \n</code>\n</pre> <pre><code># Use strict DE miRNA to get the ceRNA_axis\nceRNA_df, axis_df = cernaxis.find_ceRNA_axis_by_DEG(deg_strict_df)\n# store the filtered ceRNA network and ceRNA axis\nceRNA_df.to_csv('../../demo_out/SCZ_ceRNA_network.csv')\naxis_df.to_csv('../../demo_out/SCZ_ceRNA_axis.csv')\nceRNA_df\n</code></pre> <pre>\n<code>/Users/chenlingxi/Library/CloudStorage/Dropbox/workspace/SCZ/ceRNAxis/docs/tutorial/../../cernaxis/cernaxis.py:54: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ceRNA_df['inference'] = 'strict'\n</code>\n</pre> miRNA ceRNA species database type miRNA_log2FC ceRNA_log2FC inference 682758 hsa-miR-1278 CEBPB Homo sapiens RNAInter miRNA-mRNA 2.011778 -7.399231 strict 805405 hsa-miR-1306-3p CEACAM6 Homo sapiens miRWalk miRNA-mRNA -2.209798 2.820942 strict 806911 hsa-miR-1306-3p NEBL Homo sapiens miRWalk miRNA-mRNA -2.209798 2.529632 strict 807351 hsa-miR-1306-3p PPARGC1A Homo sapiens miRWalk miRNA-mRNA -2.209798 3.927339 strict 812245 hsa-miR-1307-3p ADAM32 Homo sapiens miRWalk miRNA-mRNA -2.093602 3.126004 strict ... ... ... ... ... ... ... ... ... 6996766 hsa-miR-6855-5p FSIP2 Homo sapiens miRWalk miRNA-mRNA -2.456434 4.072671 strict 6998598 hsa-miR-6855-5p RNASE3 Homo sapiens miRWalk miRNA-mRNA -2.456434 2.428955 strict 6998710 hsa-miR-6855-5p RWDD3 Homo sapiens miRWalk miRNA-mRNA -2.456434 2.265765 strict 6999339 hsa-miR-6855-5p TLCD4-RWDD3 Homo sapiens miRWalk miRNA-mRNA -2.456434 3.067442 strict 6999841 hsa-miR-6855-5p ZNF208 Homo sapiens miRWalk miRNA-mRNA -2.456434 2.872955 strict <p>93 rows \u00d7 8 columns</p> <pre><code># Use strict DE miRNA and loose DE mRNA to get the final ceRNA_axis\nloose_axis_df = cernaxis.expand_ceRNA_axis_by_loose_DEG(deg_strict_df, deg_loose_df)\n# store the final ceRNA axis\nloose_axis_df.to_csv('../../demo_out/SCZ_ceRNA_loose_axis.csv')\n# output the final ceRNA axis\nloose_axis_df\n</code></pre> miRNA ceRNA species database type miRNA_log2FC ceRNA_log2FC inference 1775644 hsa-miR-3064-5p ARHGAP8 Homo sapiens miRWalk miRNA-mRNA -2.123515 5.218091 loose 1775806 hsa-miR-3064-5p BCL2A1 Homo sapiens miRWalk miRNA-mRNA -2.123515 1.586707 loose 1775833 hsa-miR-3064-5p BIRC5 Homo sapiens miRWalk miRNA-mRNA -2.123515 1.762193 loose 1775877 hsa-miR-3064-5p BTNL3 Homo sapiens miRWalk miRNA-mRNA -2.123515 4.612546 loose 1776086 hsa-miR-3064-5p CCDC80 Homo sapiens TargetSCAN_8.0 miRNA-mRNA -2.123515 5.326842 loose ... ... ... ... ... ... ... ... ... 4495205 hsa-miR-485-5p TLCD4-RWDD3 Homo sapiens miRWalk miRNA-mRNA -3.818348 3.067442 loose 4495575 hsa-miR-485-5p UNC5B Homo sapiens TargetSCAN_8.0 miRNA-mRNA -3.818348 1.507402 loose 4495619 hsa-miR-485-5p UTS2 Homo sapiens miRWalk miRNA-mRNA -3.818348 2.148164 loose 4495817 hsa-miR-485-5p ZFP30 Homo sapiens miRWalk miRNA-mRNA -3.818348 1.746945 loose 4495936 hsa-miR-485-5p ZNF441 Homo sapiens miRWalk miRNA-mRNA -3.818348 1.650988 loose <p>118 rows \u00d7 8 columns</p> <p>Compared with DLRAPom detected ceRNA axes</p> <pre><code>import pandas as pd\nfrom plotnine import *\nimport matplotlib.pyplot as plt\n\ndf1 = pd.read_csv('../../demo_out/SCZ_DLRAPom_miRNA_mRNA.csv', index_col=0)[['mirnaid', 'genesymbol']].drop_duplicates()\ndf1.columns = ['miRNA', 'ceRNA']\ndf1['type'] = 'miRNA-mRNA'\ndf2 = pd.read_csv('../../demo_out/SCZ_DLRAPom_miRNA_lncRNA.csv', index_col=0)[['miRNAname', 'geneName']].drop_duplicates()\ndf2.columns = ['miRNA', 'ceRNA']\ndf2['type'] = 'miRNA-lncRNA'\ndf = pd.concat([df1, df2])\ndf['Tool'] = 'DLRAPom'\ndf3 = axis_df[['miRNA', 'ceRNA', 'type']].drop_duplicates()\ndf3['Tool'] = 'ceRNAxis'\ndf = pd.concat([df, df3])\ndf\n\nsummary = (\n    df\n    .drop_duplicates(['miRNA','ceRNA','type','Tool'])\n    .groupby('Tool')\n    .size()\n    .reset_index(name='# of interactions')\n)\n\ntools = summary['Tool'].tolist()\nsets = {\n    tool: set(df[df.Tool==tool].apply(lambda r: f\"{r.miRNA}|{r.ceRNA}\", axis=1))\n    for tool in tools\n}\n\n\nlabel_I = \"\\n\".join(sorted(sets['DLRAPom'] &amp;amp; sets['ceRNAxis']))\nprint('Interactions detected by both tools:', label_I)\n\nfrom matplotlib_venn import venn2\nA, B = tools\nfig = plt.figure(figsize=(5,5))\nv = venn2([sets[A], sets[B]], set_labels=[A, B])\n\nplt.title('Detected ceRNA interactions in SCZ data')\nplt.show()\nfig.savefig('../../demo_out/SCZ_venn.pdf', format='pdf')\n</code></pre> <pre>\n<code>Interactions detected by both tools: hsa-miR-485-5p|PPARGC1A\n</code>\n</pre>"},{"location":"tutorial/SCZ_ceRNA_axis_from_DEG/#use-differential-expressed-de-mirnamrna-to-get-cohort-specific-and-disease-relatated-cerna-axis-from-scz-data","title":"Use differential expressed (DE) miRNA/mRNA to get cohort-specific and disease relatated ceRNA axis from SCZ data","text":""},{"location":"tutorial/SCZ_ceRNA_correlation_analysis/","title":"SCZ - ceRNA-axis correlation analysis for a cohort","text":"<pre><code>%load_ext autoreload\n\n# Just download the github, and load the cernaxis into python path\n# do\nimport sys\nsys.path.append('../../')\n\n# or install cernaxis by pip\n#!pip install git+https://github.com/compbioclub/cernaxis.git@v1_as\n\nfrom cernaxis.cernaxis import ceRNAxis\n\n# initialize cernaxis object\ncernaxis = ceRNAxis()\n</code></pre> <pre><code>%autoreload\n\nimport scanpy as sc\nimport anndata as ad\n\nlncRNA_adata = sc.read_h5ad('../../demo/SCZ_lncRNA.h5ad')\nlncRNA_adata.var_names_make_unique()\n\nmiRNA_adata = sc.read_h5ad('../../demo/SCZ_miRNA.h5ad')\nmiRNA_adata.var_names_make_unique()\n\nmRNA_adata = sc.read_h5ad('../../demo/SCZ_mRNA.h5ad')\nmRNA_adata.var_names_make_unique()\n\nadata = ad.concat([mRNA_adata, miRNA_adata, lncRNA_adata], axis=1)\nadata.obs = mRNA_adata.obs\nadata.layers['count'] = adata.X\nadata\n</code></pre> <pre>\n<code>C:\\Users\\User\\AppData\\Roaming\\Python\\Python312\\site-packages\\anndata\\_core\\anndata.py:1758: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.\n  utils.warn_names_duplicates(\"var\")\n</code>\n</pre> <pre>\n<code>AnnData object with n_obs \u00d7 n_vars = 11 \u00d7 80573\n    obs: 'type'\n    layers: 'count'</code>\n</pre> <pre><code>%autoreload\n\nimport anndata as ad\n# merge the mRNA, miRNA, and lncRNA expression profiles\nadata = ad.concat([mRNA_adata.T, miRNA_adata.T, lncRNA_adata.T], merge=\"same\").T\n# set the interested ceRNA axis \nceRNA_axis_list = [('ARHGAP8', 'hsa-miR-485-5p'), ('ARHGAP8', 'ENST00000522525'), ('hsa-miR-485-5p', 'ENST00000522525')]\n# calculate the correlation\ncorr_df = cernaxis.cohort_ceRNA_corr(adata, ceRNA_axis_list)\ncorr_df.to_csv('../../demo_out/SCZ_axis_correlation.csv')\n# output correlation\ncorr_df\n</code></pre> patient gene1 gene2 correlation type correlation p value 0 All ARHGAP8 hsa-miR-485-5p Pearson Correlation -0.306925 0.358586 1 All ARHGAP8 hsa-miR-485-5p Spearman Correlation -0.353139 0.286743 2 All ARHGAP8 hsa-miR-485-5p Kendall's tau -0.288960 0.266716 3 All ARHGAP8 ENST00000522525 Pearson Correlation 0.125301 0.713554 4 All ARHGAP8 ENST00000522525 Spearman Correlation 0.316645 0.342765 5 All ARHGAP8 ENST00000522525 Kendall's tau 0.255377 0.350808 6 All hsa-miR-485-5p ENST00000522525 Pearson Correlation -0.301535 0.367519 7 All hsa-miR-485-5p ENST00000522525 Spearman Correlation -0.601782 0.050138 8 All hsa-miR-485-5p ENST00000522525 Kendall's tau -0.522233 0.057589"},{"location":"tutorial/SCZ_ceRNA_correlation_analysis/#cerna-axis-correlation-analysis-for-a-cohort","title":"ceRNA-axis correlation analysis for a cohort","text":""},{"location":"tutorial/SCZ_ceRNA_correlation_analysis/#load-the-scz-data","title":"Load the SCZ data","text":""},{"location":"tutorial/SCZ_ceRNA_correlation_analysis/#calculate-the-correlation-of-cerna-axis","title":"Calculate the correlation of ceRNA axis","text":""},{"location":"tutorial/SCZ_ceRNA_gwas_analysis/","title":"SCZ - ceRNA GWAS association analysis","text":"<pre><code>%load_ext autoreload\n\n# Just download the github, and load the cernaxis into python path\n# do\nimport sys\nsys.path.append('../../')\n\n# or install cernaxis by pip\n#!pip install git+https://github.com/compbioclub/cernaxis.git@v1_as\n\nfrom cernaxis.cernaxis import ceRNAxis\n\n# initialize cernaxis object\ncernaxis = ceRNAxis()\n</code></pre> <pre><code>%autoreload\n\nimport pandas as pd\n# read the SCZ SNP data, download from SCZ study\nsnp_data = pd.read_csv('../../demo/CLOZUK_PGC2noclo.METAL.assoc.dosage.fix', sep=' ')\nprint('snp_data\\n', snp_data.head())\n# filter snp data with p value and Odds Ratio\nsig_snp_data = snp_data[(snp_data['P'] &amp;lt; 0.05) &amp;amp; (snp_data['OR'] &amp;gt; 1)]\nprint('sig_snp_data\\n', sig_snp_data.head())\n\n# read the GWAS gene location file\n# !!! Please build this file by your own, \n# collect the genome poistion of your interested ceRNA list\ngene_df = pd.read_excel('../../demo/GWAS-SNP-20250510.xlsx')\ngene_df.index = gene_df['gene']\ngene_df.start = gene_df.start.astype(int)\ngene_df.end = gene_df.end.astype(int)\ngene_df['gene'] = gene_df['gene'].apply(lambda x: x.strip())\nprint('gene_df\\n', gene_df.head())\n\n# screen the SNPs which hit the interested ceRNA list\nGWAS_gene_snp_df, sub_gene_df, gene_count = cernaxis.screen_GWAS_SNP(sig_snp_data, gene_df)\nGWAS_gene_snp_df.to_csv('../../demo_out/SCZ_GWAS_gene_snp.csv')\nprint('GWAS_gene_snp_df\\n', GWAS_gene_snp_df.head())\nsub_gene_df.to_csv('../../demo_out/SCZ_GWAS_gene_count.csv')  \nprint('sub_gene_df\\n', sub_gene_df.head())\nprint(sub_gene_df[sub_gene_df['gene'].isin(['ARHGAP8','THUMPD3-AS1','has-miR-485'])])\n</code></pre> <pre>\n<code>snp_data\n           SNP  CHR         BP A1 A2       OR        SE       P DIRECTION\n0  rs10000000    4   40088896  A  T  1.00170  0.021973  0.9394        +-\n1  rs10000003    4   57561647  A  G  0.99938  0.010505  0.9528        +-\n2  rs10000005    4   85161558  G  A  1.01050  0.009810  0.2889        -+\n3  rs10000006    4  108826383  T  C  0.96796  0.026254  0.2149        +-\n4  rs10000008    4  172776204  C  T  0.93949  0.044015  0.1561        +-\nsig_snp_data\n            SNP  CHR         BP A1 A2      OR        SE       P DIRECTION\n31  rs10000044    4   32640754  A  G  1.0348  0.012949  0.0082        ++\n40  rs10000065    4  190051252  C  G  1.0305  0.013544  0.0264        -+\n56  rs10000091    4   12984967  T  C  1.0201  0.009989  0.0462        ++\n66   rs1000010    3   11604119  A  G  1.0302  0.010082  0.0031        ++\n72  rs10000121    4  157574035  A  G  1.0208  0.009601  0.0318        ++\ngene_df\n                    gene               id chr      start        end  \\\ngene                                                                 \nCEACAM6         CEACAM6  ENSG00000086548  19   41750977   41772211   \nNEBL               NEBL  ENSG00000078114  10   20779973   21293011   \nISY1-RAB43   ISY1-RAB43  ENSG00000261796   3  129087575  129161036   \nRPL9               RPL9  ENSG00000163682   4   39452587   39458931   \nRWDD3             RWDD3  ENSG00000122481   1   95234210   95247225   \n\n                                ref  \ngene                                 \nCEACAM6      GRCh37/hg19 by\u00a0Ensembl  \nNEBL         GRCh37/hg19 by\u00a0Ensembl  \nISY1-RAB43   GRCh37/hg19 by\u00a0Ensembl  \nRPL9         GRCh37/hg19 by\u00a0Ensembl  \nRWDD3        GRCh37/hg19 by\u00a0Ensembl  \nGWAS_gene_snp_df\n                  SNP  CHR        BP A1 A2      OR        SE       P DIRECTION  \\\n458874    rs11012200   10  20910905  G  T  1.0291  0.014040  0.0412        ++   \n535809   rs111295128   22  44796941  C  T  1.0615  0.027867  0.0322        ++   \n601501   rs111779567   22  44785617  G  A  1.0875  0.042507  0.0483        ++   \n1123330   rs11706856    3   9386517  A  G  1.0363  0.016630  0.0319        ++   \n1129181   rs11710135    3   9398216  C  A  1.0355  0.016927  0.0392        ++   \n\n                   gene  \n458874          [NEBL ]  \n535809       [ARHGAP8 ]  \n601501       [ARHGAP8 ]  \n1123330  [THUMPD3-AS1 ]  \n1129181  [THUMPD3-AS1 ]  \nsub_gene_df\n Empty DataFrame\nColumns: [gene, id, chr, start, end, ref, SNP_count]\nIndex: []\nEmpty DataFrame\nColumns: [gene, id, chr, start, end, ref, SNP_count]\nIndex: []\n</code>\n</pre> <pre><code>%autoreload\nimport numpy as np\ngenes = list(gene_count.keys())\nfor gene in genes:\n    gene_count[gene.strip()] = gene_count[gene]\n# modify headers and texts in GWAS_gene_snp_df for visualization\ntargets = ['ARHGAP8','THUMPD3-AS1','has-miR-485']\nGWAS_gene_snp_df['-log10(p)'] = -np.log10(GWAS_gene_snp_df['P'])\nGWAS_gene_snp_df['Gene'] = GWAS_gene_snp_df['gene'].apply(lambda gs: ''.join([g.strip() if g.strip() in targets else '' for g in gs]))\nGWAS_gene_snp_df = GWAS_gene_snp_df[GWAS_gene_snp_df['Gene'] != '']\nGWAS_gene_snp_df['type'] = GWAS_gene_snp_df['A1'].str.upper() + '&amp;gt;' + GWAS_gene_snp_df['A2'].str.upper()\nmymap = {'T&amp;gt;TATGA': 'Small Insertion', 'G&amp;gt;GCT': 'Small Insertion', \n         'CTT&amp;gt;C': 'Small Deletion', 'CTGGTACAGAGCCCAG&amp;gt;C': 'Small Deletion',\n         'A&amp;gt;AC': 'Small Insertion'}\nGWAS_gene_snp_df['SNP Type'] = GWAS_gene_snp_df['type'].apply(lambda x: mymap.get(x, x))\nGWAS_gene_snp_df = GWAS_gene_snp_df.sort_values(by=['SNP Type'])\n\n\n# set interested ceRNAs to plot\nceRNA_list = ['THUMPD3-AS1', 'ARHGAP8']\n# set the output file\nout_fn = '../../demo_out/SCZ_GWAS.pdf'\n# plot the gene GWAS SNP hits\ncernaxis.plot_gene_GWAS_SNP(GWAS_gene_snp_df, gene_count, ceRNA_list, out_fn)\n</code></pre>"},{"location":"tutorial/SCZ_ceRNA_gwas_analysis/#cerna-gwas-association-analysis","title":"ceRNA GWAS association analysis","text":""},{"location":"tutorial/SCZ_plot_ceRNA_exp_for_cohort/","title":"SCZ - ceRNA expression visualization for a cohort","text":"<pre><code>%load_ext autoreload\n\n# Just download the github, and load the cernaxis into python path\n# do\nimport sys\nsys.path.append('../../')\n\n# or install cernaxis by pip\n#!pip install git+https://github.com/compbioclub/cernaxis.git@v1_as\n\nfrom cernaxis.cernaxis import ceRNAxis\n\n# initialize cernaxis object\ncernaxis = ceRNAxis()\n</code></pre> <pre><code>%load_ext autoreload\n\n'''\nGiven the mRNA expression profiles for a cohort, plot the disease and control expression \nfor the ceRNA axis\n'''\n\n\nimport scanpy as sc\n\n# Read one mRNA expression profiles from a SCZ cohort;\n# this could be self-sequenced, or downloaded from the public GEO resources;\n# the expression and phenotype information should be curated.\nmRNA_adata = sc.read_h5ad('../../demo/SCZ_mRNA.h5ad')\nmRNA_adata.var_names_make_unique()\n# show the expression profile\nprint('expression\\n', mRNA_adata.X)\n# show the phenotype information\nprint('meta info\\n', mRNA_adata.obs)\n\n# set the groupby as the cohort sample type\ngroupby = 'type'\n# set the ceRNAs to be plotted\nceRNA_list = ['ARHGAP8']\n# plot the expression of ceRNA_list\ncernaxis.plot_cohort_ceRNA_exp(mRNA_adata, groupby, ceRNA_list)\n</code></pre> <pre>\n<code>The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\nexpression\n [[2457    0    0 ... 1179    8 1039]\n [2662    0    0 ... 1462    3 1412]\n [2395    0    0 ... 1372    2 2603]\n ...\n [4437    0    0 ... 1736    0 1187]\n [4113    0    0 ... 1922    2  669]\n [2746    0    0 ... 1298    0 1708]]\nmeta info\n              type\nCase-A52      SCZ\nCase-A53      SCZ\nCase-A54      SCZ\nCase-A55      SCZ\nCase-A56      SCZ\nCase-A58      SCZ\nCon-B02   Control\nCon-B04   Control\nCon-B08   Control\nCon-B21   Control\nCon-B22   Control\n</code>\n</pre> <pre>\n<code>C:\\Users\\User\\AppData\\Roaming\\Python\\Python312\\site-packages\\anndata\\_core\\anndata.py:1758: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.\n  utils.warn_names_duplicates(\"var\")\n</code>\n</pre> <pre><code>%autoreload\n'''\nGiven the miRNA expression profiles for a cohort, plot the disease and control expression \nfor the ceRNA axis\n'''\n\nimport scanpy as sc\n\n# Read one miRNA expression profiles from a SCZ cohort;\n# this could be self-sequenced, or downloaded from the public GEO resources;\n# the expression and phenotype information should be curated.\nmiRNA_adata = sc.read_h5ad('../../demo/SCZ_miRNA.h5ad')\nmiRNA_adata.var_names_make_unique()\n# show the expression profile\nprint('expression\\n', miRNA_adata.X)\n# show the phenotype information\nprint('meta info\\n', miRNA_adata.obs)\n\n# set the groupby as the cohort sample type\ngroupby = 'type'\n# set the ceRNAs to be plotted\nceRNA_list = ['hsa-miR-485-5p']\n# plot the expression of ceRNA_list\ncernaxis.plot_cohort_ceRNA_exp(miRNA_adata, groupby, ceRNA_list)\n</code></pre> <pre>\n<code>expression\n [[   296  71449    671 ...      0      3      2]\n [   292 164761    304 ...      0      0      7]\n [   641  41266   1013 ...      0      2      5]\n ...\n [  1119 159204    612 ...      5      0     17]\n [    86  11125    596 ...      2      1      5]\n [   235   6160    311 ...      1      1      1]]\nmeta info\n              type\nCase-A52      SCZ\nCase-A53      SCZ\nCase-A54      SCZ\nCase-A55      SCZ\nCase-A56      SCZ\nCase-A58      SCZ\nCon-B02   Control\nCon-B04   Control\nCon-B08   Control\nCon-B21   Control\nCon-B22   Control\n</code>\n</pre> <pre><code>%autoreload\n'''\nGiven the lncRNA expression profiles for a cohort, plot the disease and control expression \nfor the ceRNA axis\n'''\n\nimport scanpy as sc\n\n# Read one lncRNA expression profiles from a SCZ cohort;\n# this could be self-sequenced, or downloaded from the public GEO resources;\n# the expression and phenotype information should be curated.\nlncRNA_adata = sc.read_h5ad('../../demo/SCZ_lncRNA.h5ad')\nlncRNA_adata.var_names_make_unique()\n# show the expression profile\nprint('expression\\n', lncRNA_adata.X)\n# show the phenotype information\nprint('meta info\\n', lncRNA_adata.obs)\n# set the groupby as the cohort sample type\ngroupby = 'type'\n# set the ceRNAs to be plotted\nceRNA_list = ['ENST00000522525'] # the ens id of 'THUMPD3-AS1'\n# plot the expression of ceRNA_list\ncernaxis.plot_cohort_ceRNA_exp(lncRNA_adata, groupby, ceRNA_list)\n</code></pre> <pre>\n<code>expression\n [[  7 239 461 ...   0   0   0]\n [  2 179   0 ...   0   0   0]\n [  0 245  47 ...   0   0   0]\n ...\n [  4 358  55 ...   0   0  33]\n [  2 151 390 ...   0   0   0]\n [  4 200 720 ...   0   0   0]]\nmeta info\n              type\nCase-A52      SCZ\nCase-A53      SCZ\nCase-A54      SCZ\nCase-A55      SCZ\nCase-A56      SCZ\nCase-A58      SCZ\nCon-B02   Control\nCon-B04   Control\nCon-B08   Control\nCon-B21   Control\nCon-B22   Control\n</code>\n</pre>"},{"location":"tutorial/SCZ_plot_ceRNA_exp_for_cohort/#cerna-expression-visualization-for-a-cohort","title":"ceRNA expression visualization for a cohort","text":""},{"location":"tutorial/reference_ceRNA_network/","title":"Basic operations and stats for the reference ceRNA network","text":"<pre><code>%load_ext autoreload\n\n# Just download the github, and load the cernaxis into python path\n# do\nimport sys\nsys.path.append('../../')\n\n# or install cernaxis by pip\n#!pip install git+https://github.com/compbioclub/cernaxis.git@v1_as\n\nfrom cernaxis.cernaxis import ceRNAxis\n\n# initialize cernaxis object\ncernaxis = ceRNAxis()\n</code></pre> <pre><code>%autoreload\n\n# show CERNATAX reference ceRNA network\nprint(cernaxis.summarize_ref_net())\n</code></pre> <pre>\n<code>A total of 7820904 miRNA-mRNA interaction and 176510 miRNA-lncRNA interaction\ntype\nmiRNA-mRNA                 7820904\nmiRNA-lncRNA                176510\nmiRNA-mRNA;miRNA-lncRNA      10915\nName: count, dtype: int64\nNone\n</code>\n</pre> <pre><code># extract the CERNATAX reference ceRNA network \nref_net = cernaxis.ref_net\n\n# there are some operations to filter the ceRNA interactions from the ref_net\n# show reference interaction source\nprint(ref_net.database.value_counts())\n</code></pre> <pre>\n<code>database\nmiRWalk                                                                 6494557\nRNAInter                                                                 425707\nmiRDB_6.0                                                                297889\nRNAInter;miRTarBase_9.0                                                  252458\nNPInter_4.0                                                              109142\n                                                                         ...   \nmiRDB_6.0;RNAInter;ENCORI                                                     2\nmiRDB_6.0;ENCORI                                                              2\nRNAInter;miRWalk;ENCORI                                                       2\nmiRDB_6.0;NPInter_4.0;miRTarBase_9.0                                          1\nTargetSCAN_8.0;NPInter_4.0;miRTarBase_9.0;RNAInter;miRDB_6.0;miRWalk          1\nName: count, Length: 69, dtype: int64\n</code>\n</pre> <pre><code># store the miRNA-mRNA;miRNA-lncRNA interactions\ncernaxis.ref_net[cernaxis.ref_net.type == 'miRNA-mRNA;miRNA-lncRNA'].to_csv('../../demo_out/ceRNA_db_mix.csv')\n\nprint('The number of unique ceRNA interactions: ', len(ref_net.ceRNA.unique()))\nprint('The number of unique miRNA-mRNA interactions: ', len(ref_net[ref_net.type == 'miRNA-mRNA'].ceRNA.unique()))\nprint('The number of unique miRNA-lncRNA interactions: ', len(ref_net[ref_net.type == 'miRNA-lncRNA'].ceRNA.unique()))\n</code></pre> <pre>\n<code>The number of unique ceRNA interactions:  30177\nThe number of unique miRNA-mRNA interactions:  21354\nThe number of unique miRNA-lncRNA interactions:  12849\n</code>\n</pre>"},{"location":"tutorial/reference_ceRNA_network/#basic-operations-and-stats-for-the-reference-cerna-network","title":"Basic operations and stats for the reference ceRNA network","text":""}]}